// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  phoneNumber String   @unique
  name        String?
  age         Int?
  language    String   @default("en")
  location    String?
  preferences Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  conversations Conversation[]
  healthProfiles HealthProfile[]
  clinicSearches ClinicSearch[]

  @@map("users")
}

model Conversation {
  id        String   @id @default(uuid())
  userId    String
  sessionId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages Message[]

  @@map("conversations")
}

model Message {
  id             String      @id @default(uuid())
  conversationId String
  content        String
  role           MessageRole
  messageType    String      @default("text")
  timestamp      DateTime    @default(now())
  metadata       Json?

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model HealthProfile {
  id             String   @id @default(uuid())
  userId         String
  lastPeriod     DateTime?
  cycleLength    Int?
  symptoms       String[]
  medications    String[]
  allergies      String[]
  medicalHistory Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("health_profiles")
}

model ClinicSearch {
  id          String   @id @default(uuid())
  userId      String
  location    String
  serviceType String
  results     Json
  createdAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("clinic_searches")
}

model KnowledgeBase {
  id          String   @id @default(uuid())
  topic       String
  content     String
  language    String   @default("en")
  category    String
  tags        String[]
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("knowledge_base")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}